@page "/"
@using WebSocketSharp
@inject IJSRuntime JS

<h3>ROS2 WebSocket Client</h3>

<button @onclick="ConnectWebSocket">Connect to ROS Bridge</button>
<button @onclick="SendForwardCommand">Move Forward</button>
<button @onclick="SendBackwardCommand">Move Backward</button>
<button @onclick="SendStopCommand">Stop</button>

<p>@statusMessage</p>

@code {
    private string statusMessage = "Disconnected";
    private WebSocket? ws;

    private void ConnectWebSocket()
    {
        string wsUrl = "ws://192.168.137.46:9090";
        ws = new WebSocket(wsUrl);

        ws.OnOpen += (sender, e) =>
        {
            statusMessage = "Connected to ROS Bridge server";
            InvokeAsync(StateHasChanged);
        };

        ws.OnMessage += (sender, e) =>
        {
            statusMessage = "Received message: " + e.Data;
            InvokeAsync(StateHasChanged);
        };

        ws.OnError += (sender, e) =>
        {
            statusMessage = "Error: " + e.Message;
            InvokeAsync(StateHasChanged);
        };

        ws.OnClose += (sender, e) =>
        {
            statusMessage = "Connection closed";
            InvokeAsync(StateHasChanged);
        };

        ws.Connect();
    }

    private void SendForwardCommand()
    {
        if (ws != null && ws.IsAlive)
        {
            var twistMessage = new
            {
                op = "publish",
                topic = "/turtle1/cmd_vel",
                msg = new
                {
                    linear = new { x = 1.0, y = 0.0, z = 0.0 },
                    angular = new { x = 0.0, y = 0.0, z = 0.0 }
                }
            };
            string message = System.Text.Json.JsonSerializer.Serialize(twistMessage);
            ws.Send(message);
        }
    }

    private void SendBackwardCommand()
    {
        if (ws != null && ws.IsAlive)
        {
            var twistMessage = new
            {
                op = "publish",
                topic = "/cmd_vel",
                msg = new
                {
                    linear = new { x = -1.0, y = 0.0, z = 0.0 },
                    angular = new { x = 0.0, y = 0.0, z = 0.0 }
                }
            };
            string message = System.Text.Json.JsonSerializer.Serialize(twistMessage);
            ws.Send(message);
        }
    }

    private void SendStopCommand()
    {
        if (ws != null && ws.IsAlive)
        {
            var twistMessage = new
            {
                op = "publish",
                topic = "/cmd_vel",
                msg = new
                {
                    linear = new { x = 0.0, y = 0.0, z = 0.0 },
                    angular = new { x = 0.0, y = 0.0, z = 0.0 }
                }
            };
            string message = System.Text.Json.JsonSerializer.Serialize(twistMessage);
            ws.Send(message);
        }
    }
}
